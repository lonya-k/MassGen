# Three Agent Discord MCP Test Configuration
# This configuration uses 3 different backends (Gemini, OpenAI, Claude) with Discord MCP capability
# Each agent can interact with Discord servers, send messages, and manage Discord activities
#
# Setup Requirements:
# 1. Install Discord MCP server: npm install -g mcp-discord
# 2. Set environment variables in .env file:
#    DISCORD_TOKEN="your_discord_bot_token"
#    OPENAI_API_KEY="your_openai_key"
#    GOOGLE_API_KEY="your_gemini_key"
#    ANTHROPIC_API_KEY="your_claude_key"
#
# Example usage:
# uv run python -m massgen.cli --config configs/three_agents_discord_mcp_test.yaml "Check recent messages in our development channel, summarize the discussion, and post a helpful response about the current topic."

agents:
  - id: "gemini_discord_agent"
    backend:
      type: "gemini"
      model: "gemini-2.5-flash"
      mcp_servers:
        - name: "discord"
          type: "stdio"
          command: "npx"
          args: ["-y", "mcp-discord", "--config", "${DISCORD_TOKEN}"]
          env:
            DISCORD_TOKEN: "${DISCORD_TOKEN}"
          security:
            level: "high"
    system_message: |
      Available Discord Tools:
      - Discord server interaction via MCP integration
      - Message reading, sending, and management
      - Channel and server information access
      
  - id: "openai_discord_agent"
    backend:
      type: "openai"
      model: "gpt-4o-mini"
      mcp_servers:
        - name: "discord"
          type: "stdio"
          command: "npx"
          args: ["-y", "mcp-discord", "--config", "${DISCORD_TOKEN}"]
          env:
            DISCORD_TOKEN: "${DISCORD_TOKEN}"
          security:
            level: "high"
      exclude_tools:
        - mcp__discord__discord_send_webhook_message
        - mcp__discord__discord_edit_webhook_message
    system_message: |
      Available Discord Tools:
      - Discord server interaction via MCP integration  
      - Message reading, sending, and management
      - Channel and server information access
      
  - id: "claude_discord_agent"
    backend:
      type: "claude_code"
      cwd: "claude_code_workspace_discord_mcp"
      permission_mode: "bypassPermissions"
      mcp_servers:
        discord:
          type: "stdio"
          command: "npx"
          args: ["-y", "mcp-discord", "--config", "${DISCORD_TOKEN}"]
          env:
            DISCORD_TOKEN: "${DISCORD_TOKEN}"
    system_message: |
      Available Discord Tools:
      - Discord server interaction via MCP integration
      - Message reading, sending, and management  
      - Channel and server information access

ui:
  display_type: "rich_terminal"
  logging_enabled: true

# Coordination Settings
coordination:
  voting_enabled: true
  max_rounds: 3
  consensus_threshold: 0.6
  timeout_seconds: 300
